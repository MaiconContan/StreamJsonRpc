steps:

- script: dotnet build -t:build,pack --no-restore -c $(BuildConfiguration) /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: dotnet build

- powershell: azure-pipelines/dotnet-test-cloud.ps1 -Configuration $(BuildConfiguration) -Agent $(Agent.JobName) -PublishResults
  displayName: dotnet test
  condition: and(succeeded(), ne(variables['OptProf'], 'true'))

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net472 (+EventSource)
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net472 --filter "TestCategory!=FailsInCloudTest$(FailsOnMonoFilter)" -v n /p:CollectCoverage=true /bl:"$(Build.ArtifactStagingDirectory)/build_logs/test_net472_etw.binlog" --diag "$(Build.ArtifactStagingDirectory)/test_logs/net472_etw.txt"
    testRunTitle: streamjsonrpc.tests-etw (net472, $(Agent.JobName))
  env:
    StreamJsonRpc_TestWithEventSource: 1
  condition: and(succeeded(), ne(variables['OptProf'], 'true'))

# We have to artifically run this script so that the extra .nupkg is produced for variables/InsertConfigValues.ps1 to notice.
- powershell: azure-pipelines\artifacts\VSInsertion.ps1
  displayName: Prepare VSInsertion artifact
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)"
  failOnStderr: true
  displayName: Publish artifacts
  condition: succeededOrFailed()

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')
  timeoutInMinutes: 3
  continueOnError: true
